/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package taller_4_paralelismo_y_recursion
import org.scalameter.withWarmer
import org.scalameter.Warmer.Default

import org.scalameter.measurer


/**
 * Taller 4: Paralelismo y recursión
 * Authors: David Santiago Velasco Triana, Jhojan Stiven Castaño Jejenm, William Alexander Franco Otero
 * Profesor: Carlos A Delgado
 */
object App {
  type Matriz = Vector[Vector[Int]]
  def main(args: Array[String]): Unit = {
    val matrices = new Matrices()
    val m1 = matrices.vectorAlAzar(8,8)
    val m2 = matrices.vectorAlAzar(8,8)
    val matrizA = matrices.matrizAlAzar(1024,1024)
    val matrizB = matrices.matrizAlAzar(1024,1024)
    val matrizA1 = matrices.matrizAlAzar(512,512)
    val matrizB1 = matrices.matrizAlAzar(512,512)
    val parmatrices = (matrizA,matrizB)
    def compararAlgoritmos(f1: (Matriz, Matriz) => Matriz, f2: (Matriz, Matriz) => Matriz, m1: Matriz, m2: Matriz): Unit = {
      val time1 = withWarmer(new Default) measure {
        f1(m1, m2)
      }
      println(s"Tiempo de ejecucion de la funcion 1: $time1")
      val time2 = withWarmer(new Default) measure {
        f2(m1, m2)
      }
      println(s"Tiempo de ejecucion de la funcion 2: $time2")

      val aceleracion = time1.value / time2.value
      println(s"aceleracion: $aceleracion")
    }
    //compararAlgoritmos(matrices.multMatriz, matrices.multMatrizParalelo, matrizA, matrizB)

    def compararAlgoritmosTiempos(f1: (Matriz, Matriz) => Matriz, f2: (Matriz, Matriz) => Matriz,f3:(Matriz,Matriz) => Matriz, m1: Matriz, m2: Matriz): Unit = {
      val time1 = withWarmer(new Default) measure {
        f1(m1, m2)
      }
      println(s"Tiempo de ejecucion de la funcion 1 secuacial: $time1")
      val time2 = withWarmer(new Default) measure {
        f2(m1, m2)
      }
      println(s"Tiempo de ejecucion de la funcion 2 PARALA: $time2")
      val time3 =withWarmer(new Default) measure {
        f3(m1, m2)
      }
      println(s"Tiempo de ejecucion de la funcion 3 RECURSIVA: $time3")
      val aceleracion = time1.value / time2.value
      println(s"aceleracion: $aceleracion")
    }
    compararAlgoritmosTiempos(matrices.multMatriz, matrices.multMatrizParalelo,matrices.multMatrozRec, matrizA, matrizB)
  }

}
